addMarkers(lng=43.84738, lat=9.852, popup="The birthplace of R")
m
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=43.84738, lat=9.852, popup="The birthplace of R") %>%
addMarkers(lng=43.94738, lat=9.952, popup="The birthplace of R")
m
library(shiny)
library(leaflet)
library(RColorBrewer)
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
sliderInput("range", "Magnitudes", min(quakes$mag), max(quakes$mag),
value = range(quakes$mag), step = 0.1
),
selectInput("colors", "Color Scheme",
rownames(subset(brewer.pal.info, category %in% c("seq", "div")))
),
checkboxInput("legend", "Show legend", TRUE)
)
)
server <- function(input, output, session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
quakes[quakes$mag >= input$range[1] & quakes$mag <= input$range[2],]
})
# This reactive expression represents the palette function,
# which changes as the user makes selections in UI.
colorpal <- reactive({
colorNumeric(input$colors, quakes$mag)
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(quakes) %>% addTiles() %>%
fitBounds(~min(long), ~min(lat), ~max(long), ~max(lat))
})
# Incremental changes to the map (in this case, replacing the
# circles when a new color is chosen) should be performed in
# an observer. Each independent set of things that can change
# should be managed in its own observer.
observe({
pal <- colorpal()
leafletProxy("map", data = filteredData()) %>%
clearShapes() %>%
addCircles(radius = ~10^mag/10, weight = 1, color = "#777777",
fillColor = ~pal(mag), fillOpacity = 0.7, popup = ~paste(mag)
)
})
# Use a separate observer to recreate the legend as needed.
observe({
proxy <- leafletProxy("map", data = quakes)
# Remove any existing legend, and only if the legend is
# enabled, create a new one.
proxy %>% clearControls()
if (input$legend) {
pal <- colorpal()
proxy %>% addLegend(position = "bottomright",
pal = pal, values = ~mag
)
}
})
}
shinyApp(ui, server)
install.packages("exploratory")
install.packages("RPostgreSQL")
install.packages("arules")
install.packages("raster")
library(raster)
austria0 <- getData('GADM', country='AUT', level=0)
par(mfrow(2,1))
plot(austria0, main="Adm. Boundaries Austria Level 0")
climate <- getData('worldclim', var='bio', res=2.5)
library(raster)
austria0 <- getData('GADM', country='SO', level=1)
plot(austria0, main="Adm. Boundaries Somalia Level 1")
#create a sequence for the latitude and longitude values
latseq = seq(-90,90,15)
lonseq = seq(-180,180,15)
#transform to a dataframe
latlon.df = data.frame()
for (i in 1:length(lonseq)){
for (ii in 1:length(latseq)) {
latlon.df[ii,i] <- paste0(latseq[ii],",",lonseq[i])
}
}
#create a sequence for the latitude and longitude values
latseq = seq(-90,90,15)
lonseq = seq(-180,180,15)
#transform to a dataframe
latlon.df = data.frame()
for (i in 1:length(lonseq)){
for (ii in 1:length(latseq)) {
latlon.df[ii,i] <- paste0(latseq[ii],",",lonseq[i])
}
}
downloadTweets = function(term, radius, unit) {
tweetsTotal.df = data.frame()
for (i in 1:ncol(latlon.df)) {
for (ii in 1:nrow(latlon.df)) {
#output for console that shows what coordinate is being queried at the moment
flush.console()
print(paste(ii,",", i))
print(latlon.df[ii,i])
#query statement
tweets<- searchTwitter(term, n=1000,
since="2015-01-01",
geocode=paste0(latlon.df[ii,i],",",radius,unit),
retryOnRateLimit=200)
#create df out of search query
tweets.df = do.call("rbind",lapply(tweets,as.data.frame))
#merge all dataframes
tweetsTotal.df = rbind(tweetsTotal.df, tweets.df)
#pause 5sec. between every query to not exceed Twitter download limit
Sys.sleep(5)
}
}
tweetsTotal.df
}
View(downloadTweets)
library(ggplot2)
library(maptools)
#create new dataframe with coodrinates only, and do type conversion (necessarry for ggplot)
coords = data.frame(longit=tweetsTotal.df$longitude, latit=tweetsTotal.df$latitude)
coords$latit = as.double(as.character(coords$latit))
coords$longit = as.double(as.character(coords$longit))
#get background map
world =  wrld_simpl
world = fortify(world)
#plot with ggplot2
p1 <- ggplot()+ggtitle(expression(atop("Worldwide Tweets", atop(italic("Keyword "Ukraine" | since 2015"), ""))))+geom_map(data=world,map=world,aes(x=long,y=lat,map_id=id))+geom_point(colour="steelblue3", alpha = 0.30, data=coords, mapping=aes(x=longit, y=latit), size=4)
p1
tweets = downloadTweets(term, radius, unit)
install.packages("RCurl")
install.packages("twitteR")
library(RCurl)
library(twitteR)
library(RCurl)
library(twitteR)
connect2twitter = function() {
# Set SSL certs globally
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
reqURL = "https://api.twitter.com/oauth/request_token"
accessURL = "https://api.twitter.com/oauth/access_token"
authURL = "https://api.twitter.com/oauth/authorize"
consumerKey = 'YaQIFo0vJLd1VSFMzZl3JqvjO'
consumerSecret = '0qxTc815EPdGh2jD81DqA0nGLTMNgsYWlx75aUNcSbk2B6hjGc'
twitCred = OAuthFactory$new(consumerKey=consumerKey,consumerSecret=consumerSecret,requestURL=reqURL,accessURL=accessURL,authURL=authURL)
twitCred$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
registerTwitterOAuth(twitCred)
}
connect2twitter() #execute function
library(RCurl)
library(twitteR)
library(ROAuth)
connect2twitter = function() {
# Set SSL certs globally
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
reqURL = "https://api.twitter.com/oauth/request_token"
accessURL = "https://api.twitter.com/oauth/access_token"
authURL = "https://api.twitter.com/oauth/authorize"
consumerKey = 'YaQIFo0vJLd1VSFMzZl3JqvjO'
consumerSecret = '0qxTc815EPdGh2jD81DqA0nGLTMNgsYWlx75aUNcSbk2B6hjGc'
twitCred = OAuthFactory$new(consumerKey=consumerKey,consumerSecret=consumerSecret,requestURL=reqURL,accessURL=accessURL,authURL=authURL)
twitCred$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
registerTwitterOAuth(twitCred)
}
connect2twitter() #execute function
library(ROAuth)
packages.install("library(ROAuth)")
packages.install("ROAuth")
install.packages("ROAuth")
library(RCurl)
library(twitteR)
library(ROAuth)
connect2twitter = function() {
# Set SSL certs globally
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
reqURL = "https://api.twitter.com/oauth/request_token"
accessURL = "https://api.twitter.com/oauth/access_token"
authURL = "https://api.twitter.com/oauth/authorize"
consumerKey = 'YaQIFo0vJLd1VSFMzZl3JqvjO'
consumerSecret = '0qxTc815EPdGh2jD81DqA0nGLTMNgsYWlx75aUNcSbk2B6hjGc'
twitCred = OAuthFactory$new(consumerKey=consumerKey,consumerSecret=consumerSecret,requestURL=reqURL,accessURL=accessURL,authURL=authURL)
twitCred$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
registerTwitterOAuth(twitCred)
}
connect2twitter() #execute function
library(twitteR)
library(ROAuth)
connect2twitter = function() {
# Set SSL certs globally
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
reqURL = "https://api.twitter.com/oauth/request_token"
accessURL = "https://api.twitter.com/oauth/access_token"
authURL = "https://api.twitter.com/oauth/authorize"
consumerKey = 'YaQIFo0vJLd1VSFMzZl3JqvjO'
consumerSecret = '0qxTc815EPdGh2jD81DqA0nGLTMNgsYWlx75aUNcSbk2B6hjGc'
twitCred = OAuthFactory$new(consumerKey=consumerKey,consumerSecret=consumerSecret,requestURL=reqURL,accessURL=accessURL,authURL=authURL)
twitCred$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
registerTwitterOAuth(twitCred)
}
connect2twitter() #execute function
7442141
library(RCurl)
library(twitteR)
library(ROAuth)
connect2twitter = function() {
# Set SSL certs globally
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
reqURL = "https://api.twitter.com/oauth/request_token"
accessURL = "https://api.twitter.com/oauth/access_token"
authURL = "https://api.twitter.com/oauth/authorize"
consumerKey = 'YaQIFo0vJLd1VSFMzZl3JqvjO'
consumerSecret = '0qxTc815EPdGh2jD81DqA0nGLTMNgsYWlx75aUNcSbk2B6hjGc'
twitCred = OAuthFactory$new(consumerKey=consumerKey,consumerSecret=consumerSecret,requestURL=reqURL,accessURL=accessURL,authURL=authURL)
twitCred$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
registerTwitterOAuth(twitCred)
}
connect2twitter() #execute function
library(RCurl)
library(twitteR)
library(ROAuth)
connect2twitter = function() {
# Set SSL certs globally
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
reqURL = "https://api.twitter.com/oauth/request_token"
accessURL = "https://api.twitter.com/oauth/access_token"
authURL = "https://api.twitter.com/oauth/authorize"
consumerKey = 'YaQIFo0vJLd1VSFMzZl3JqvjO'
consumerSecret = '0qxTc815EPdGh2jD81DqA0nGLTMNgsYWlx75aUNcSbk2B6hjGc'
twitCred = OAuthFactory$new(consumerKey=consumerKey,consumerSecret=consumerSecret,requestURL=reqURL,accessURL=accessURL,authURL=authURL)
twitCred$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
registerTwitterOAuth(twitCred)
}
connect2twitter() #execute function
library(RCurl)
library(twitteR)
library(ROAuth)
connect2twitter = function() {
# Set SSL certs globally
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
reqURL = "https://api.twitter.com/oauth/request_token"
accessURL = "https://api.twitter.com/oauth/access_token"
authURL = "https://api.twitter.com/oauth/authorize"
consumerKey = 'YaQIFo0vJLd1VSFMzZl3JqvjO'
consumerSecret = '0qxTc815EPdGh2jD81DqA0nGLTMNgsYWlx75aUNcSbk2B6hjGc'
# twitCred = OAuthFactory$new(consumerKey=consumerKey,consumerSecret=consumerSecret,requestURL=reqURL,accessURL=accessURL,authURL=authURL)
twitCred = setup_twitter_oauth(CUSTOMER_KEY, CUSTOMER_SECRET, ACCESS_TOKEN, ACCESS_secret, credentials_file=NULL)
twitCred$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
registerTwitterOAuth(twitCred)
}
connect2twitter() #execute function
library(RCurl)
library(twitteR)
library(ROAuth)
connect2twitter = function() {
# Set SSL certs globally
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
reqURL = "https://api.twitter.com/oauth/request_token"
accessURL = "https://api.twitter.com/oauth/access_token"
authURL = "https://api.twitter.com/oauth/authorize"
consumerKey = 'YaQIFo0vJLd1VSFMzZl3JqvjO'
consumerSecret = '0qxTc815EPdGh2jD81DqA0nGLTMNgsYWlx75aUNcSbk2B6hjGc'
# twitCred = OAuthFactory$new(consumerKey=consumerKey,consumerSecret=consumerSecret,requestURL=reqURL,accessURL=accessURL,authURL=authURL)
twitCred = setup_twitter_oauth(consumerKey=consumerKey,consumerSecret=consumerSecret,requestURL=reqURL,accessURL=accessURL,authURL=authURL)
#twitCred = setup_twitter_oauth(consumerKey, consumerSecret, ACCESS_TOKEN, ACCESS_secret, credentials_file=NULL)
twitCred$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
registerTwitterOAuth(twitCred)
}
connect2twitter() #execute function
library(raster)
austria0 <- getData('GADM', country='AUT', level=0)
library(raster)
austria0 <- getData('GADM', country='AUT', level=0)
plot(austria0, main="Adm. Boundaries Austria Level 0")
climate <- getData('worldclim', var='bio', res=2.5)
srtm <- getData('SRTM', lon=16, lat=48)
plot(climate$bio1, main="Annual Mean Temperature")
plot(strm)
plot(srtm)
plot(climate$bio1, main="Annual Mean Temperature")
plot(austria0,add=TRUE)
srtm <- getData('SRTM', lon=16, lat=48)
install.packages("rgdal")
install.packages("dygraphs")
library(dygraphs)
lungDeaths <- cbind(mdeaths, fdeaths)
dygraph(lungDeaths)
dygraph(lungDeaths) %>% dyRangeSelector()
```{r}
library(DT)
datatable(iris)
```
devtools::install_github("rstudio/DT")
library(DT)
```{r}
library(DT)
datatable(iris)
```
datatable(lrp)
```
datatable(mydata)
datatable(m)
datatable(lungDeaths)
library(dygraphs)
dygraph(sunspots) %>% dyRangeSelector()
library(dygraphs)
dygraph(sunspots)
library(dygraphs)
dygraph(lungDeaths)
library(dygraphs)
dygraph(lungDeaths) %>% dyRangeSelector()
library(dygraphs)
dygraph(lungDeaths$mdeaths) %>% dyRangeSelector()
library(dygraphs)
dygraph(lungDeaths['mdeaths']) %>% dyRangeSelector()
datatable(lungDeaths)
library(dygraphs)
dygraph(lungDeaths[1:]) %>% dyRangeSelector()
install.packages(c('repr', 'IRdisplay', 'crayon', 'pbdZMQ', 'devtools'))
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()  # to register the kernel in the current R installation
IRkernel::installspec(name = 'ir33', displayname = 'R 3.3')
IRkernel::installspec(name = 'ir33', displayname = 'R 3.3')
IRkernel::installspec(name = 'ir32', displayname = 'R 3.2')
install.packages("knitr")
install.packages("kernlab")
library(kernlab)
data(spam)
str(spam[,5])
library(kernlab)
data(spam)
str(spam[,5])
set.seed(3435)
set.seed(3435)
trainIndicator = rbiom(4601, size = 1, prob = 0.5)
table(trainIndicator)
set.seed(3435)
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
trainSpam = spam[trainIndicator == 1, ]
testSpam = spam[trainIndicator == 0, ]
names(trainSpam)
head(trainSpam)
train(trainSpam$type)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve +1) ~ trainSpam$type)
plot(log10(trainSpam[ ,1:4] + 1))
hcluster = hclust(dist(t(trainSpam[,1:57])))
plot(hcluster)
hclusterUpdated = hclust(dist(t(log10(trainSpam[,1:57]+ 1)))
plot(hclusterUpdated)
hclusterUpdated = hclust(dist(t(log10(trainSpam[,1:57]+ 1))))
plot(hclusterUpdated)
---
title: "Vignette Title"
author: "Vignette Author"
date: "`r Sys.Date()`"
output: rmarkdown::html_vignette
vignette: >
%\VignetteIndexEntry{Vignette Title}
%\VignetteEngine{knitr::rmarkdown}
%\VignetteEncoding{UTF-8}
---
Vignettes are long form documentation commonly included in packages. Because they are part of the distribution of the package, they need to be as compact as possible. The `html_vignette` output type provides a custom style sheet (and tweaks some options) to ensure that the resulting html is as small as possible. The `html_vignette` format:
- Never uses retina figures
- Has a smaller default figure size
- Uses a custom CSS stylesheet instead of the default Twitter Bootstrap style
## Vignette Info
Note the various macros within the `vignette` section of the metadata block above. These are required in order to instruct R how to build the vignette. Note that you should change the `title` field and the `\VignetteIndexEntry` to match the title of your vignette.
## Styles
The `html_vignette` template includes a basic CSS theme. To override this theme you can specify your own CSS in the document metadata as follows:
output:
rmarkdown::html_vignette:
css: mystyles.css
## Figures
The figure sizes have been customised so that you can easily put two images side-by-side.
```{r, fig.show='hold'}
plot(1:10)
plot(10:1)
```
You can enable figure captions by `fig_caption: yes` in YAML:
output:
rmarkdown::html_vignette:
fig_caption: yes
Then you can use the chunk option `fig.cap = "Your figure caption."` in **knitr**.
## More Examples
You can write math expressions, e.g. $Y = X\beta + \epsilon$, footnotes^[A footnote here.], and tables, e.g. using `knitr::kable()`.
```{r, echo=FALSE, results='asis'}
knitr::kable(head(mtcars, 10))
```
Also a quote using `>`:
> "He who gives up [code] safety for [code] speed deserves neither."
([via](https://twitter.com/hadleywickham/status/504368538874703872))
# Chunk 1
plot(1:10)
plot(10:1)
# Chunk 2
knitr::kable(head(mtcars, 10))
chooseCRANmirror()
---
title: "Untitled"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
chooseCRANmirror()
install.packages("knitr")
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
---
title: "Untitled"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
install.packages(c("curl", "DBI", "dygraphs", "forecast", "foreign", "jsonlite", "lattice", "lubridate", "Matrix", "mgcv", "R6", "Rcpp", "RcppArmadillo", "readr", "shiny", "stringr", "survival", "tibble"))
install.packages(c("curl", "DBI", "dygraphs", "forecast", "foreign",
)
))
chooseCRANmirror()
install.packages("sp")
install.packages("raster")
chooseCRANmirror()
setwd("~/")
setwd("/Volumes/STORAGE/odrive/Box/git/datascience/ReproducibleResearch/")
# Reproducible Research
##Peer Assessment 1
---
```{r setoptions, echo=FALSE, results="hide"}
library(knitr)
opts_chunk$set(echo=TRUE, results="asis")
```
## Loading and preprocessing the data
Load the data.
```{r}
data <- read.csv("activity.csv")
```
Create a column to store the date and time.
```{r}
time <- formatC(data$interval / 100, 2, format="f")
data$date.time <- as.POSIXct(paste(data$date, time),
format="%Y-%m-%d %H.%M",
tz="GMT")
```
# Reproducible Research
##Peer Assessment 1
---
```{r setoptions, echo=FALSE, results="hide"}
library(knitr)
opts_chunk$set(echo=TRUE, results="asis")
```
## Loading and preprocessing the data
Load the data.
```{r}
data <- read.csv("activity.csv")
```
install.packages("ggplot2")
install.packages("Hmic")
install.packages("Hmisc")
library(knitr)
opts_chunk$set(echo=TRUE, results="asis")
data <- read.csv("activity.csv")
View(data)
time <- formatC(data$interval / 100, 2, format="f")
data$date.time <- as.POSIXct(paste(data$date, time),
format="%Y-%m-%d %H.%M",
tz="GMT")
time
head(data)
if(!file.exists("activity.csv")){
system("unzip activity.zip")
}
data <- read.csv("activity.csv")
View(data)
time <- formatC(data$interval / 100, 2, format="f")
data$date.time <- as.POSIXct(paste(data$date, time),
format="%Y-%m-%d %H.%M",
tz="GMT")
